# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# What is the value of the first triangle number to have over five hundred divisors?

import time

def triangle_numbers(num):
	triangle = [0]*(num+1)
	triangle[1] = 1
	for i, val in enumerate(triangle):
		if i ==0:
			continue
		triangle[i] = triangle[i-1] + i
	return triangle

def number_of_divisors(num):
	number = num
	count = 0
	for i in xrange(1,num+1):
		if number % i == 0:
			count += 1
			num = number / i
	return count

def divisors(num):
	number = num
	divs = []
	for i in xrange(1,num+1):
		if number % i == 0:
			divs.append(i)
			num = number / i
	return divs

mark = time.time()
tri = triangle_numbers(25000)
for i, val in enumerate(tri):
	if val % 437580 != 0:
		continue
	count = number_of_divisors(val)
	if count > 100:
		print i, val, count, divisors(val)
	if count > 500:
		print '\n', val, '\n'
		break
print 'time: ', time.time()-mark